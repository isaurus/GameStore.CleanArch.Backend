version: '3.8'

services:
  # Servicio de SQL Server
  sqlserver:
    # Define la imagen de SQL Server que se utilizará. Esta es la última versión estable.
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver  # Nombre del contenedor
    environment:
      # Definir la contraseña del usuario 'sa' (SuperAdmin). Debe cumplir con las políticas de seguridad de SQL Server.
      - SA_PASSWORD=PasswordSQLServer2025
      # Aceptar el acuerdo de licencia de SQL Server
      - ACCEPT_EULA=Y
      - PUID=1000
      - PGID=1000
    volumes:
      # Volumen persistente para almacenar los datos de SQL Server, asegurando que los datos sobrevivan al reiniciar el contenedor.
      - sqlvolume:/var/opt/mssql 
    ports:
      # Mapear el puerto 1433 del contenedor al puerto 1433 del host para que las conexiones de bases de datos sean accesibles.
      - "1433:1433"
    networks:
      # Conectar el contenedor a la red 'appnetwork', que permitirá la comunicación entre los contenedores.
      - appnetwork

  # Servicio de la API de Game Store
  game-store-api:
    build:
      context: .
      dockerfile: dockerfile
    # Imagen de la API, el bloque 'build' permite construirlo con 'docker-compose up --build'.
    image: game-store-api:latest
    container_name: game-store-api  # Nombre del contenedor
    ports:
      # Mapear el puerto 8082 del contenedor al puerto 8080 del host para la comunicación HTTP.
      - "8082:8080"
    depends_on:
      # Establece que este contenedor depende del servicio 'sqlserver', asegurando que SQL Server esté listo antes de iniciar la API.
      - sqlserver   
    environment:
      # Variable de entorno que define el entorno de ejecución de la aplicación .NET (por ejemplo, Desarrollo o Producción).
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      # Conectar la API a la misma red 'appnetwork' para que pueda comunicarse con el contenedor de SQL Server.
      - appnetwork
    # command: /bin/bash -c "dotnet ef database update && dotnet GameStore.CleanArch.Backend.WebApi.dll"  # Aplica las migraciones y luego arranca la API

# Definición de redes
networks:
  appnetwork:
    driver: bridge  # Usamos la red tipo bridge para permitir la comunicación entre los contenedores.

# Definición de volúmenes
volumes:
  sqlvolume:  # Volumen persistente para almacenar los datos de SQL Server de forma que sobrevivan a los reinicios de los contenedores.
